/* 
 * GetSubscriptions & Webhooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Subscriptions.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract]
        public partial class Subscription :  IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for the webhook subscription..</param>
        /// <param name="description">A short note about what events this webhook is following..</param>
        /// <param name="webhookUrl">A secure https URL where the event data will be posted..</param>
        /// <param name="hmacKey">A hash-based message authentication code used for verifying both the data integrity and the authenticity of a webhook message via SHA256..</param>
        /// <param name="events">List of events you want to be notified about..</param>
        public Subscription(Guid? id = default(Guid?), string description = default(string), string webhookUrl = default(string), string hmacKey = default(string), List<string> events = default(List<string>))
        {
            this.Id = id;
            this.Description = description;
            this.WebhookUrl = webhookUrl;
            this.HmacKey = hmacKey;
            this.Events = events;
        }
        
        /// <summary>
        /// A unique identifier for the webhook subscription.
        /// </summary>
        /// <value>A unique identifier for the webhook subscription.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// A short note about what events this webhook is following.
        /// </summary>
        /// <value>A short note about what events this webhook is following.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A secure https URL where the event data will be posted.
        /// </summary>
        /// <value>A secure https URL where the event data will be posted.</value>
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// A hash-based message authentication code used for verifying both the data integrity and the authenticity of a webhook message via SHA256.
        /// </summary>
        /// <value>A hash-based message authentication code used for verifying both the data integrity and the authenticity of a webhook message via SHA256.</value>
        [DataMember(Name="hmac_key", EmitDefaultValue=false)]
        public string HmacKey { get; set; }

        /// <summary>
        /// List of events you want to be notified about.
        /// </summary>
        /// <value>List of events you want to be notified about.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<string> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  HmacKey: ").Append(HmacKey).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.HmacKey == input.HmacKey ||
                    (this.HmacKey != null &&
                    this.HmacKey.Equals(input.HmacKey))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.HmacKey != null)
                    hashCode = hashCode * 59 + this.HmacKey.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
