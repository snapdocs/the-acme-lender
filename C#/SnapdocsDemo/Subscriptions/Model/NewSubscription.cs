/* 
 * GetSubscriptions & Webhooks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Subscriptions.Model
{
    /// <summary>
    /// NewSubscription
    /// </summary>
    [DataContract]
        public partial class NewSubscription :  IEquatable<NewSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewSubscription" /> class.
        /// </summary>
        /// <param name="description">A short note about what events this webhook is following..</param>
        /// <param name="webhookUrl">A secure https URL where the event data will be posted. (required).</param>
        /// <param name="events">List of events you want to be notified about..</param>
        public NewSubscription(string description = default(string), string webhookUrl = default(string), List<string> events = default(List<string>))
        {
            // to ensure "webhookUrl" is required (not null)
            if (webhookUrl == null)
            {
                throw new InvalidDataException("webhookUrl is a required property for NewSubscription and cannot be null");
            }
            else
            {
                this.WebhookUrl = webhookUrl;
            }
            this.Description = description;
            this.Events = events;
        }
        
        /// <summary>
        /// A short note about what events this webhook is following.
        /// </summary>
        /// <value>A short note about what events this webhook is following.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A secure https URL where the event data will be posted.
        /// </summary>
        /// <value>A secure https URL where the event data will be posted.</value>
        [DataMember(Name="webhook_url", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// List of events you want to be notified about.
        /// </summary>
        /// <value>List of events you want to be notified about.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<string> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewSubscription {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewSubscription);
        }

        /// <summary>
        /// Returns true if NewSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of NewSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
