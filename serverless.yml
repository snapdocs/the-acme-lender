service: example-snapdocs-event-listener

frameworkVersion: '3'

useDotenv: true

custom:
  pythonRequirements:
    #usePoetry: false
    #dockerizePip: true
    #layer: true
    #zip: true

provider:
  name: aws
  runtime: python3.9
  # the "env" (dev, qa, prod) and region would be passed from the deployment tool chain, including CI/CD, or terraform
  # or Ansible
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  environment:
    ENV: ${self:provider.stage}


  stackTags:
    env: ${opt:stage, self:provider.stage}
    managed: Serverless Framework
    project: ${self:service}
    owner: api team
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: "arn:aws:secretsmanager:*:*:secret:${self:provider.stage}/example-snapdocs-event-listener/*"
package:
  individually: true
  exclude:
    - venv/**
    - node_modules/**
    - .history/**
    - requirements.txt
    - package-lock.json
functions:
  snapdocs-event-listener:
    handler: snapdocs_event_handler.handle
    description: the webhook service to receive the snapdocs broadcasted events
    timeout: 30
    events:
      - http:
          path: listen/snapdocs
          method: post
    environment:
      # pass the environment from .env.dev to Lambda
      SNAPDOCS_TOKEN_URL: ${env:SNAPDOCS_TOKEN_URL}
      SNAPDOCS_API_URL: ${env:SNAPDOCS_API_URL}
      LOG_LEVEL: ${env:LOG_LEVEL}



plugins:
  - serverless-python-requirements
